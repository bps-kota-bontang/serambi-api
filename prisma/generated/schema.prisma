// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "./generated"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(cuid())
  name      String
  nip       String         @unique @db.Char(18)
  email     String         @unique
  password  String
  isSuper   Boolean        @default(false)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  teams     UsersOnTeams[]

  @@map("users")
}

model Team {
  id        String           @id @default(cuid())
  name      String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  users     UsersOnTeams[]
  services  SevicesOnTeams[]

  @@map("teams")
}

model UsersOnTeams {
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([teamId, userId])
  @@map("user_team")
}

model Service {
  id          String           @id @default(cuid())
  name        String
  description String           @db.Text
  imageUrl    String?
  link        String
  tags        String[]         @default([])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  teams       SevicesOnTeams[]
  credential  Credential?

  @@map("services")
}

model SevicesOnTeams {
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([teamId, serviceId])
  @@map("service_team")
}

model Credential {
  id        String  @id @default(cuid())
  username  String?
  password  String?
  hasSso    Boolean @default(false)
  note      String?
  Service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String  @unique

  @@map("credentials")
}
